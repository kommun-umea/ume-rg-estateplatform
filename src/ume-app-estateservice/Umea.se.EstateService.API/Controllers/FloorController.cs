using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Umea.se.EstateService.API.Controllers.Requests;
using Umea.se.EstateService.Logic.Exceptions;
using Umea.se.EstateService.Logic.Interfaces;
using Umea.se.EstateService.Logic.Models;
using Umea.se.Toolkit.Auth;

namespace Umea.se.EstateService.API.Controllers;

[Produces("application/json")]
[Route(ApiRoutes.Floors)]
[AuthorizeApiKey]
public sealed class FloorController(
    IFloorBlueprintService blueprintService,
    ILogger<FloorController> logger) : ControllerBase
{
    private readonly IFloorBlueprintService _blueprintService = blueprintService;
    private readonly ILogger<FloorController> _logger = logger;

    /// <summary>
    /// Retrieves a floor blueprint in PDF or SVG format.
    /// </summary>
    /// <remarks>
    /// Streams the floor blueprint generated by Pythagoras.
    /// </remarks>
    /// <param name="floorId">The floor identifier.</param>
    /// <param name="request">Blueprint request parameters.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    [HttpGet("{floorId:int}/blueprint")]
    [SwaggerOperation(
        Summary = "Get floor blueprint",
        Description = "Streams a floor blueprint as PDF or SVG."
    )]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(StatusCodes.Status409Conflict)]
    [ProducesResponseType(StatusCodes.Status502BadGateway)]
    public async Task<IActionResult> GetFloorBlueprintAsync(
        int floorId,
        [FromQuery] FloorBlueprintRequest request,
        CancellationToken cancellationToken)
    {
        if (!ModelState.IsValid)
        {
            return ValidationProblem(ModelState);
        }

        try
        {
            FloorBlueprint blueprint = await _blueprintService.GetBlueprintAsync(floorId, request.Format, request.IncludeWorkspaceTexts, cancellationToken).ConfigureAwait(false);
            blueprint.Content.Position = 0;
            return File(blueprint.Content, blueprint.ContentType, blueprint.FileName);
        }
        catch (FloorBlueprintValidationException ex)
        {
            _logger.LogWarning(ex, "Validation error while generating blueprint for floor {FloorId}", floorId);
            return BadRequest(new { message = ex.Message });
        }
        catch (FloorBlueprintUnavailableException ex)
        {
            _logger.LogError(ex, "Blueprint unavailable for floor {FloorId}", floorId);
            return StatusCode(StatusCodes.Status502BadGateway, new { message = ex.Message });
        }
        catch (KeyNotFoundException ex)
        {
            _logger.LogWarning(ex, "Floor {FloorId} not found when requesting blueprint", floorId);
            return NotFound(new { message = "Floor not found." });
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogWarning(ex, "Conflict while generating blueprint for floor {FloorId}", floorId);
            return Conflict(new { message = ex.Message });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error while generating blueprint for floor {FloorId}", floorId);
            return StatusCode(StatusCodes.Status500InternalServerError, new { message = "Unexpected error while generating blueprint." });
        }
    }
}
